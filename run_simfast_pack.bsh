#!/bin/bash

scen=$1
gcm=$2
nccfg=$3
#gcm=CSIRO-Mk3-6-0
#gcm=IPSL-CM5A-MR
rundirname="wus_full.1" # this is hardcoded in simulator/run_sub_vic_fast.bsh
#scen=historical
#scen=rcp45
##scen=rcp85
#nccfg=cfg_flux2nc/vic2ncBlocks_MACA_RCP45.cfg

function countsuccess() { 
    tail "$@" | grep -e "EXIT_STATUS" | awk -F[=\ ] '{if($2==0){sum+=1}}END{print sum}'
}

#: <<-CMT
## download files
qsub -sync y maca_$gcm"_"$scen".qsub"
#CMT

#: <<-CMT
## prepare forcings
# in place of (cd $gcm/historical/; ./run_master.bsh)
(
cd $gcm/$scen/
date_stamp=$(date +"%F-%H-%M")
./master.bsh > "log_master_$date_stamp.txt" 2>&1
)
#CMT

(
cd /home/raid3/stumbaugh/IS/CONUS/v2.2/simulator/setup
echo $(pwd -P)
./setup_vic_sim.bsh $scen $gcm $rundirname

# only run model if expected number of forcings
if [ $? -eq 0 ]
then
    # clean up 1-col forcings and splitmon text (spinoff -- no sync)
    # wipe nodes independently (not included here)
	cd ../..
	./clean_vicfrc_scen_gcm.bsh $scen $gcm
    ##TODO: move some variables to setup/projenvs.bsh
    cd simulator
	./run_vic_part.bsh $scen $gcm
    jque=()
    #jobnum=9
    #for i in {8..60} # a restart here. had to remove packcmds_part9.qsub.o*
    jobnum=1
    for i in {0..60}
    do
        subdom=$(printf "%02d" $i)
        numgrandchildren=50
        ./run_sub_vic_fast.bsh $scen $gcm $subdom $numgrandchildren
        wait
        (
        cd $scen/$gcm/$rundirname
        qsub -o logs -sync y revic_$subdom"_"$numgrandchildren".qsub"
        )
        ./run_packfluxpart.bsh $scen/$gcm/$rundirname $nccfg part$jobnum $jobnum
        
        ## this is really nasty, I know.
        ## check for any new packing completions, if complete then delete associated fluxgrids and fluxes.
        echo jque length: "${#jque[@]}"
        if [ "${#jque[@]}" -ge 1 ]
        then
            jque_persist=()
            for jq in "${jque[@]}"
            do
                success=0
                cfg=$scen/$gcm/$rundirname/sge_pack/packcmds_part$jq
                if [ -f $cfg".cfg" ]
                then
                    ## check for expected number of part1.qsub.o* output logs        
                    njobs=$(wc -l $cfg".cfg" | awk '{print $1}' )
                    partlogs=( $(ls $cfg".qsub.o"*) )
                    echo Njobs: $njobs 
                    echo Partlogs: "${partlogs[@]}"
                    if [ "$njobs" -eq "${#partlogs[@]}" ]
                    then
                        ## make sure output log EXIT_STATUS is 0
                        success=$(countsuccess "${partlogs[@]}")
                        echo Successes found: $success
                    fi
                    if [ "$success" -eq "$njobs" ]
                    then
                        echo "Removing fluxes for part" $jq
                        ## This needs to be dropped -- quick checking it
                        ## need splitlist ID (w/o zero-padding) where ID in splitlistID
                        qsub -N "rmselfgrids" -o $scen/$gcm/$rundirname/logs ./clean_selsplits_fluxesgrd.bsh $scen/$gcm/$rundirname $jq
                        qsub -N "rmselfluxes" -o $scen/$gcm/$rundirname/logs ./clean_selfluxes.bsh $scen/$gcm/$rundirname $jq
                    else
                        echo "Insufficient success"
                        #outputs not flagged for removal so check later
                        #earliest first
                        jque_persist=( "${jque_persist[@]}" $jq )
                    fi
                else
                    jque_persist=( "${jque_persist[@]}" $jq )
                fi
            done
            jque=( "${jque_persist[@]}" $jobnum )
        else
            jque=( $jobnum )                        
        fi
        # unflagged parts and new part stored for subsquent removal scan
        # earliest first
                        
        let jobnum=$jobnum+1

         
    done
else
    echo "ABORTING: failed expected number of forcings test"
fi
)

: <<-CMT
## AFTER SPLITCAT ##
#for rcp in rcp85 #rcp45 
for rcp in rcp45 
do
    for gcm in CCSM4 CNRM-CM5 #CanESM2 #CCSM4 CNRM-CM5
    do
        cp scripts_static/master_split2cat.bsh $gcm/$rcp
        cd $gcm/$rcp
        #mv master.bsh master_all.bsh
        cp master_split2cat.bsh master.bsh
        ./run_master.bsh
        cd ../..
    done
done
CMT


: <<-CMT
##Do one rcp first and rcp85 preferentially... actually this gets sent to SGE and preference is lost
for rcp in rcp85 rcp45 
do
	for gcm in CCSM4 CNRM-CM5
	do
	    cp scripts_static/master_thru_splitmon.bsh $gcm/$rcp
	    cd $gcm/$rcp
	    mv master.bsh master_all.bsh
        cp master_thru_splitmon.bsh master.bsh
	    ./run_master.bsh
	    cd ../..
    done
done
CMT

: <<-CMT
for gcm in CanESM2 CCSM4
do
    (cd $gcm/historical/; ./run_master.bsh)
done
CMT